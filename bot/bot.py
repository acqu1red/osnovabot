from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from fastapi import FastAPI, Request
import os
import logging
import uvicorn
import asyncio
import threading

TOKEN = os.getenv('TG_BOT_TOKEN', '8354723250:AAEWcX6OojEi_fN-RAekppNMVTAsQDU0wvo')
CHANNEL_ID = -1002686841761

logging.basicConfig(level=logging.INFO)

LANGUAGES = {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English', 'de': 'Deutsch'}

I18N = {
    'ru': {
        'start': '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ CATALYST CLUB, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ "–û–°–ù–û–í–ê" –∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–µ–≥–æ.\n\nüí≥ –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî 1500‚ÇΩ –≤ –º–µ—Å—è—Ü (~14$). –û–ø–ª–∞—Ç–∞ ‚Äî –≤ —Ä—É–±–ª—è—Ö, –∫—Ä–∏–ø—Ç–µ, –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ –∏ Telegram Stars.\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:',
        'pay': '–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø',
        'about': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ',
        'ask': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
        'offer': '–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã',
        'question_hint': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å mini app –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.',
        'about_text': '–ö–∞–Ω–∞–ª "–û–°–ù–û–í–ê" ‚Äî –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è ... (–æ–ø–∏—Å–∞–Ω–∏–µ)',
        'pay_text': '–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ mini app (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –≤ –º–µ–Ω—é)',
        'choose_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / Sprache w√§hlen:',
        'lang_set': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}'
    },
    'en': {
        'start': 'Welcome! This is the official bot of CATALYST CLUB. Learn more about the private channel "OSNOVA" and join.',
        'pay': 'Pay for access',
        'about': 'About the channel',
        'ask': 'Ask a question',
        'offer': 'Offer agreement',
        'question_hint': 'Please use the mini app to ask your question.',
        'about_text': 'The "OSNOVA" channel is a private community for ... (description)',
        'pay_text': 'To pay, use the mini app (button below or in menu)',
        'choose_lang': 'Choose language:',
        'lang_set': 'Language set: {lang}'
    },
    'de': {
        'start': 'Willkommen! Dies ist der offizielle Bot des CATALYST CLUB. Erfahre mehr √ºber den privaten Kanal "OSNOVA" und trete bei.',
        'pay': 'Zugang bezahlen',
        'about': '√úber den Kanal',
        'ask': 'Frage stellen',
        'offer': 'Angebotsvertrag',
        'question_hint': 'Bitte nutze die Mini-App, um deine Frage zu stellen.',
        'about_text': 'Der Kanal "OSNOVA" ist eine private Community f√ºr ... (Beschreibung)',
        'pay_text': 'F√ºr die Zahlung nutze die Mini-App (unten oder im Men√º)',
        'choose_lang': 'Sprache w√§hlen:',
        'lang_set': 'Sprache eingestellt: {lang}'
    }
}

user_lang = {}

# --- FastAPI –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend ---
fastapi_app = FastAPI()

@fastapi_app.post("/webhook_question")
async def webhook_question(request: Request):
    data = await request.json()
    username = data.get('username', 'unknown')
    user_id = data.get('user_id', 'unknown')
    message = data.get('message', '')
    file_url = data.get('file_url')
    text = f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nUsername: @{username}\nUser ID: {user_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
    if file_url:
        text += f"\n[–í–ª–æ–∂–µ–Ω–∏–µ]({file_url})"
    await send_to_channel(text)
    return {"status": "ok"}

@fastapi_app.post("/webhook_answer")
async def webhook_answer(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    answer = data.get('answer')
    text = f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {answer}\nüëâ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç (—Å–Ω–æ–≤–∞ mini app)"
    await send_to_user(user_id, text)
    return {"status": "ok"}

async def send_to_channel(text):
    app = Application.builder().token(TOKEN).build()
    await app.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode=ParseMode.MARKDOWN)

async def send_to_user(user_id, text):
    app = Application.builder().token(TOKEN).build()
    await app.bot.send_message(chat_id=user_id, text=text)

# --- –Ø–∑—ã–∫–æ–≤–∞—è —É—Ç–∏–ª–∏—Ç–∞ ---
def get_lang(user):
    if user.id in user_lang:
        return user_lang[user.id]
    tg_lang = (user.language_code or 'ru')[:2]
    return tg_lang if tg_lang in I18N else 'ru'

def t(user, key):
    lang = get_lang(user)
    return I18N[lang][key]

def get_main_menu(user):
    return ReplyKeyboardMarkup([
        [t(user, 'pay')],
        [KeyboardButton(t(user, 'ask'), web_app=WebAppInfo(url="https://acqu1red.github.io/osnovabot/"))],
        [t(user, 'about')],
        [t(user, 'offer')]
    ], resize_keyboard=True)

# --- Telegram Bot Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        await update.message.reply_text(
            t(user, 'start'),
            reply_markup=get_main_menu(user)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    if text == t(user, 'pay'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí´ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ (1000 –∑–≤–µ–∑–¥)", callback_data="pay_stars")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º", web_app=WebAppInfo(url="https://acqu1red.github.io/osnovabot/"))]
        ])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
    elif text == t(user, 'about'):
        await update.message.reply_text(t(user, 'about_text'))
    elif text == t(user, 'offer'):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –æ—Ñ–µ—Ä—Ç—ã
        pdf_path = os.path.join(os.path.dirname(__file__), '../miniapp/public/–û–§–ï–†–¢–ê.pdf')
        if os.path.exists(pdf_path):
            await update.message.reply_document(open(pdf_path, 'rb'), filename='–û–§–ï–†–¢–ê.pdf')
        else:
            await update.message.reply_text('–û—Ñ–µ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    elif text in LANGUAGES.values():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é
        for code, name in LANGUAGES.items():
            if text == name:
                user_lang[user.id] = code
                await update.message.reply_text(I18N[code]['lang_set'].format(lang=name))

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "pay_stars":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
        await query.edit_message_text("üí´ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã 1000 –∑–≤–µ–∑–¥–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí´ –û–ø–ª–∞—Ç–∏—Ç—å 1000 –∑–≤–µ–∑–¥", callback_data="confirm_stars")]
        ])
        await query.edit_message_reply_markup(keyboard)
    elif query.data == "confirm_stars":
        await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–æ–º–∞–Ω–¥–∞ /language –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    user = update.effective_user
    buttons = [[name] for name in LANGUAGES.values()]
    await update.message.reply_text(
        t(user, 'choose_lang'),
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

def run_fastapi():
    uvicorn.run(fastapi_app, host="0.0.0.0", port=8001)

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    threading.Thread(target=run_fastapi, daemon=True).start()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("language", language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()